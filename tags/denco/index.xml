<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Denco on kuune.org</title>
    <link>http://kuune.org/tags/denco/</link>
    <description>Recent content in Denco on kuune.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jun 2014 17:52:45 +0900</lastBuildDate>
    <atom:link href="http://kuune.org/tags/denco/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Denco 技術解説</title>
      <link>http://kuune.org/text/2014/06/17/commentary-of-denco/</link>
      <pubDate>Tue, 17 Jun 2014 17:52:45 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/06/17/commentary-of-denco/</guid>
      <description>

&lt;p&gt;今回は Golang 用の URL ルーターである &lt;a href=&#34;https://github.com/naoina/denco&#34;&gt;Denco&lt;/a&gt; の技術解説をしていきます。&lt;br /&gt;
その前にひとつ、お知らせがあります。Denco はこのたび URL ルーターから URL ルーター兼 HTTP request multiplexer となりました。つまり、&lt;a href=&#34;http://golang.org/pkg/net/http/#ServeMux&#34;&gt;http.ServeMux&lt;/a&gt; の代わりとして使えるようになりました。&lt;br /&gt;
詳しくは &lt;a href=&#34;https://github.com/naoina/denco/blob/master/README.md&#34;&gt;README&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h2 id=&#34;基本戦略&#34;&gt;基本戦略&lt;/h2&gt;

&lt;p&gt;まず始めに、Denco のルーティングは静的パス（&lt;code&gt;/user/alice&lt;/code&gt; みたいなの）とパラメーター付きパス（&lt;code&gt;/user/:name&lt;/code&gt; みたいなの）で使用するアルゴリズムを変えています。&lt;br /&gt;
静的パスの場合は Go の map を使い、パラメーター付きパスの場合はパラメーターを扱えるように拡張したダブル配列を使います。これは、静的パスの場合、ダブル配列で処理するより Go の map を使ったほうが速いからです。&lt;br /&gt;
ですが、パラメーター付きパスは Go の map では扱えないので、拡張したダブル配列を使うことになります。今回はこのダブル配列の拡張についての解説です。&lt;/p&gt;

&lt;p&gt;ダブル配列というのは &lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%82%A4%E6%9C%A8&#34;&gt;Trie&lt;/a&gt; という主に文字列検索に使われるデータ構造の実装方法のひとつで、Trie の実装の中では最速の部類に入るものです。&lt;br /&gt;
詳しい概要については &lt;a href=&#34;http://nanika.osonae.com/DArray/dary.html&#34;&gt;http://nanika.osonae.com/DArray/dary.html&lt;/a&gt; や &lt;a href=&#34;http://d.hatena.ne.jp/takeda25/20120219/1329634865&#34;&gt;http://d.hatena.ne.jp/takeda25/20120219/1329634865&lt;/a&gt; を参照してください。&lt;br /&gt;
以下からはダブル配列を理解している前提での解説になります。&lt;/p&gt;

&lt;h2 id=&#34;拡張ダブル配列&#34;&gt;拡張ダブル配列&lt;/h2&gt;

&lt;p&gt;さて、ダブル配列は速い Trie の実装ではありますが、静的な文字列に対するものなのでパラメーター付きパスのような特定の文字に意味を持たせるということがそのままではできません。&lt;br /&gt;
そこで、Denco では構築時およびルックアップ時にメタ文字である &lt;code&gt;:&lt;/code&gt; と &lt;code&gt;*&lt;/code&gt; を特別扱いするようにダブル配列を拡張しています。&lt;/p&gt;

&lt;h3 id=&#34;シングルパラメーター&#34;&gt;シングルパラメーター&lt;/h3&gt;

&lt;p&gt;まず Denco の仕様として &lt;code&gt;/user/:name/:id&lt;/code&gt; などの &lt;code&gt;:name&lt;/code&gt; や &lt;code&gt;:id&lt;/code&gt; の部分は任意の文字列にマッチします。マッチする長さは次の &lt;code&gt;/&lt;/code&gt; が現れるまでか、終端までです。&lt;br /&gt;
例えば &lt;code&gt;/user/:name/:id&lt;/code&gt; に対して &lt;code&gt;/user/alice/1&lt;/code&gt; でマッチを試みた場合、&lt;code&gt;:name&lt;/code&gt; には &lt;code&gt;alice&lt;/code&gt; が、&lt;code&gt;:id&lt;/code&gt; には &lt;code&gt;1&lt;/code&gt; がマッチします。&lt;/p&gt;

&lt;h4 id=&#34;構築&#34;&gt;構築&lt;/h4&gt;

&lt;p&gt;まず構築に使用する文字列は &lt;strong&gt;レコード&lt;/strong&gt; と呼びます。レコードには文字列の他にパラメーター名を保持するスライスをフィールドとして持たせます。&lt;br /&gt;
ダブル配列の構築では先頭から 1 文字ずつ見て構築していくのですが、Denco ではこのとき、&lt;code&gt;:&lt;/code&gt; という文字が現れた場合、次の &lt;code&gt;/&lt;/code&gt; の前、または終端まで読み込みます。&lt;br /&gt;
&lt;code&gt;/user/:name/:id&lt;/code&gt; であれば、最初の &lt;code&gt;:&lt;/code&gt; が現れたとき &lt;code&gt;:&lt;/code&gt; から次の &lt;code&gt;/&lt;/code&gt; の前まで読み込み、&lt;code&gt;:name&lt;/code&gt; という文字列を得ます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:&lt;/code&gt; はメタ文字なので、そのあとの &lt;code&gt;name&lt;/code&gt; が実際のパラメーターの名前になります。こうして得たパラメーターの名前をレコードのパラメーター名を保持するスライスに追加します。&lt;br /&gt;
また、レコード自体は参照時には使用しなくなるので、参照時に使用する BASE/CHECK の配列の要素にシングルパラメーターであるというフラグを立てておきます。&lt;br /&gt;
これで構築におけるシングルパラメーターの処理は終了なので、通常のダブル配列の構築に戻ります。&lt;br /&gt;
&lt;code&gt;/user/:name/:id&lt;/code&gt; というレコードを構築すると、上記処理によって &lt;code&gt;/user/:/:&lt;/code&gt; として構築され、&lt;code&gt;:&lt;/code&gt; の位置に対応する BASE/CHECK 配列の要素にはシングルパラメーターであるというフラグが立っていることになります。&lt;/p&gt;

&lt;p&gt;レコードの終端まで処理が終わればレコードに対するデータを実際に保持するノードを生成し、そのノードにパラメーター名を保持するスライスをレコードからコピーします。&lt;br /&gt;
このノードは専用の配列に格納され、ルックアップに成功した場合に対応するノードが取り出されますが、今回は割愛します。&lt;/p&gt;

&lt;h4 id=&#34;ルックアップ&#34;&gt;ルックアップ&lt;/h4&gt;

&lt;p&gt;まず、&lt;code&gt;/user/:name/:id&lt;/code&gt; というレコードは &lt;code&gt;/user/:/:&lt;/code&gt; として構築されています。これに対して &lt;code&gt;/user/alice/1&lt;/code&gt; という文字列のルックアップを試みると以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/user/:/:

/
/u
/us
/use
/user
/user/
/user/a ← a と : は違うので失敗！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;始めは BASE/CHECK 配列を使って普通にダブル配列のルックアップをしていきます。すると上記のように &lt;code&gt;:&lt;/code&gt; の場所で失敗します。&lt;br /&gt;
通常のダブル配列ならば失敗した時点でその文字列は無いということになるのですが、Denco では下記のように処理を続けます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;失敗した時点での BASE/CHECK 配列の要素のシングルパラメーターかどうかのフラグを調べる&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;シングルパラメーターでない場合、後述するワイルドカードパラメーターのチェックに移る&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ワイルドカードパラメーターのチェックも失敗した場合、ルックアップは失敗する&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;シングルパラメーターの場合、現在の位置から次の &lt;code&gt;/&lt;/code&gt; の前、または終端まで読み込みパラメーターとする&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;読み込んだあとからダブル配列のルックアップを再開&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;上記を繰り返し、最後まで読んだら終了&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/user/:/:

/
/u
/us
/use
/user
/user/
/user/a ←失敗！

      v ←現在位置
/user/a → 現在の位置がシングルパラメーターであるかをチェック

  ↓ /user/: の部分にあたるので現在位置はシングルパラメーター

/user/alice → &amp;quot;alice&amp;quot; を読み込みパラメーターとする

           v ←再開位置
/user/alice/
/user/alice/1 ←失敗！

            v ←現在位置
/user/alice/1 → 現在の位置がシングルパラメーターであるかをチェック

    ↓ /user/:/: の部分にあたるので現在位置はシングルパラメーター

/user/alice/1 → &amp;quot;1&amp;quot; を読み込みパラメーターとする

最後まで読んだので終了 → /user/alice/1 はマッチ、&amp;quot;name&amp;quot; パラメーターの値は &amp;quot;alice&amp;quot;、&amp;quot;id&amp;quot; パラメーターの値は &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ワイルドカードパラメーター&#34;&gt;ワイルドカードパラメーター&lt;/h3&gt;

&lt;h4 id=&#34;構築-1&#34;&gt;構築&lt;/h4&gt;

&lt;p&gt;ほぼシングルパラメーターと同様ですが &lt;code&gt;*&lt;/code&gt; という文字が現れた場合、ワイルドカードパラメーターとして扱います。&lt;br /&gt;
シングルパラメーターのときは次の &lt;code&gt;/&lt;/code&gt; の前、または終端まで読み込みますが、Denco のワイルドカードパラメーターの場合は常に終端まで読み込みます。&lt;br /&gt;
ですので、&lt;code&gt;/static/*filepath&lt;/code&gt; というレコードの場合 &lt;code&gt;filepath&lt;/code&gt; がパラメーターの名前になりますが、&lt;code&gt;/static/*filepath/robots.txt&lt;/code&gt; とあった場合は &lt;code&gt;filepath/robots.txt&lt;/code&gt; が名前になってしまいますので注意してください。&lt;/p&gt;

&lt;p&gt;また、参照時に使用する BASE/CHECK の配列の要素にはワイルドカードパラメーターであるというフラグを立てます。&lt;br /&gt;
&lt;code&gt;/static/*filepath&lt;/code&gt; というレコードを構築すると &lt;code&gt;/static/*&lt;/code&gt; として構築されます。&lt;/p&gt;

&lt;h4 id=&#34;ルックアップ-1&#34;&gt;ルックアップ&lt;/h4&gt;

&lt;p&gt;シングルパラメーターでのルックアップとほぼ同様ですが、失敗した際にワイルドカードパラメーターの場合は常に終端まで読み込まれ、それがパラメーターの値になります。&lt;br /&gt;
&lt;code&gt;/static/image/logo.png&lt;/code&gt; という文字列をルックアップすると以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/static/*filepath

/
/s
/st
/sta
/stat
/stati
/static
/static/
/static/i ←失敗！

        v ←現在位置
/static/i → 現在の位置がワイルドカードパラメーターであるかをチェック

    ↓ /static/* の部分にあたるので現在位置はワイルドカードパラメーター

/static/image/logo.png → &amp;quot;image/logo.png&amp;quot; を読み込みパラメーターとする

最後まで読んだので終了 → /static/image/logo.png はマッチ、&amp;quot;filepath&amp;quot; パラメーターの値は &amp;quot;image/logo.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シングルパラメーターとワイルドカードパラメーターの優先順位は シングルパラメーター &amp;gt; ワイルドカードパラメーター です。&lt;br /&gt;
例えば &lt;code&gt;/user/:name&lt;/code&gt; と &lt;code&gt;/user/*any&lt;/code&gt; というレコードがあった場合、&lt;code&gt;/user/alice&lt;/code&gt; は &lt;code&gt;/user/:name&lt;/code&gt; にマッチします。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Denco ではどのようにしてダブル配列を拡張してパラメーターを扱えるようにしているかをざっくりと解説しました。&lt;br /&gt;
実際には今回解説した処理に加えてバックトラックによるパラメーターマッチをしています。バックトラックを行うことによって &lt;code&gt;/user/:name/:id&lt;/code&gt; と &lt;code&gt;/user/alice/:id&lt;/code&gt; のようなレコードを一緒に扱うことができるようになっています。&lt;br /&gt;
興味があればソースを読んでみてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>世界最速だった URL ルーターをリリースしました</title>
      <link>http://kuune.org/text/2014/06/12/denco/</link>
      <pubDate>Thu, 12 Jun 2014 18:35:08 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/06/12/denco/</guid>
      <description>

&lt;p&gt;Golang 用 URL ルーター &lt;a href=&#34;https://github.com/naoina/denco&#34;&gt;Denco&lt;/a&gt; をリリースしました。&lt;br /&gt;
ちょっと前までは最速でしたが、&lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;HttpRouter&lt;/a&gt; の作者によって高速にバックミラーから消し去られました。&lt;br /&gt;
ですが、HttpRouter ではできないことが Denco にできたりしますしおすし。&lt;br /&gt;
ベンチマークは &lt;a href=&#34;https://github.com/julienschmidt/go-http-routing-benchmark&#34;&gt;https://github.com/julienschmidt/go-http-routing-benchmark&lt;/a&gt; からどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;denco-とは&#34;&gt;Denco とは&lt;/h2&gt;

&lt;p&gt;既に開発していた &lt;a href=&#34;https://github.com/naoina/kocha-urlrouter&#34;&gt;kocha-urlrouter&lt;/a&gt; のダブル配列実装をベースに色々と手を加えたものになります。&lt;br /&gt;
速度を重視して開発してましたが、前述の通り HttpRouter に追いぬかれました。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;下記のように使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;router := denco.New()
router.Build([]denco.Record{
    {&amp;quot;/&amp;quot;, &amp;quot;root&amp;quot;},
    {&amp;quot;/user/:id&amp;quot;, 1024},
    {&amp;quot;/user/:name/:id&amp;quot;, []string{&amp;quot;username&amp;quot;}},
    {&amp;quot;/static/*filepath&amp;quot;, &amp;quot;static&amp;quot;},
})
data, params, found := router.Lookup(&amp;quot;/&amp;quot;)
fmt.Printf(&amp;quot;%v\n&amp;quot;, data.(string))
data, params, found = router.Lookup(&amp;quot;/user/1&amp;quot;)
fmt.Printf(&amp;quot;%v, %v = %v\n&amp;quot;, data.(int), params[0].Name, params[0].Value)
data, params, found = router.Lookup(&amp;quot;/user/naoina/2&amp;quot;)
fmt.Printf(&amp;quot;%v\n&amp;quot;, data.([]string))
for _, v := range params {
    fmt.Printf(&amp;quot;%v = %v\n&amp;quot;, v.Name, v.Value)
}
data, params, found = router.Lookup(&amp;quot;/static/path/to/other&amp;quot;)
fmt.Printf(&amp;quot;%v, %v = %v\n&amp;quot;, data, params[0].Name, params[0].Value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;README にも書いてあるんですが、Go の &lt;a href=&#34;http://golang.org/pkg/net/http/#ServeMux&#34;&gt;http.ServeMux&lt;/a&gt; を置き換えるものではないので、&lt;a href=&#34;http://golang.org/pkg/net/http/#Handler&#34;&gt;http.Handler&lt;/a&gt;  インターフェースは提供していません。&lt;br /&gt;
ですので、HandlerFunc などを呼ぶためのグルーコードを書く必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;github.com/naoina/denco&amp;quot;
)

type handler struct {
    router *denco.Router
}

type handlerFunc func(http.ResponseWriter, *http.Request, []denco.Param)

func (h *handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    m, params, found := h.router.Lookup(r.RequestURI)
    if !found {
        panic(&amp;quot;route not found&amp;quot;)
    }
    m.(handlerFunc)(w, r, params)
}

func Index(w http.ResponseWriter, r *http.Request, _ []denco.Param) {
    fmt.Fprint(w, &amp;quot;Welcome!\n&amp;quot;)
}

func Hello(w http.ResponseWriter, r *http.Request, params []denco.Param) {
    fmt.Fprintf(w, &amp;quot;hello, %s!\n&amp;quot;, params)
}

func main() {
    router := denco.New()
    if err := router.Build([]denco.Record{
        {&amp;quot;/&amp;quot;, handlerFunc(Index)},
        {&amp;quot;/hello/naoina&amp;quot;, handlerFunc(Hello)},
        {&amp;quot;/hello/:name&amp;quot;, handlerFunc(Hello)},
    }); err != nil {
        panic(err)
    }
    h := &amp;amp;handler{router}
    log.Fatal(http.ListenAndServe(&amp;quot;:8080&amp;quot;, h))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはそもそも &lt;a href=&#34;https://github.com/naoina/kocha&#34;&gt;Kocha&lt;/a&gt; で使うために書き始めたものなので上記のようになっています。&lt;/p&gt;

&lt;h2 id=&#34;vs-httprouter&#34;&gt;vs HttpRouter&lt;/h2&gt;

&lt;p&gt;再び最速の座を手に入れるべく頑張っていますが、現状では HttpRouter とほぼダブルスコアです。。。社会は厳しい！&lt;br /&gt;
ですが、Denco にしかできないことがあります。&lt;br /&gt;
例えば、HttpRouter では &lt;code&gt;/user/:name&lt;/code&gt; と &lt;code&gt;/user/naoina&lt;/code&gt; など、パラメーター付きパスと静的パスがかぶるようなルートが一緒に使えず、構築時に panic するようになっていますが、Denco だと問題ありません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;router.Build([]denco.Record{
    {&amp;quot;/user/:name&amp;quot;, &amp;quot;first&amp;quot;},
    {&amp;quot;/user/naoina&amp;quot;, &amp;quot;second&amp;quot;},
})
router.Lookup(&amp;quot;/user/hoge&amp;quot;) // &amp;quot;first&amp;quot;
router.Lookup(&amp;quot;/user/foo&amp;quot;) // &amp;quot;first&amp;quot;
router.Lookup(&amp;quot;/user/naoina&amp;quot;) // &amp;quot;second&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁ、負け惜しみです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;私が調べた限りだと、ダブル配列を使った URL ルーターの実装というものがありませんでした。&lt;br /&gt;
ですので、参考になるか分かりませんが、次回から Denco の技術解説みたいなのを書こうかなと考えています。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>