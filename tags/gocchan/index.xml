<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gocchan on kuune.org</title>
    <link>http://kuune.org/tags/gocchan/</link>
    <description>Recent content in Gocchan on kuune.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jan 2014 09:31:19 +0900</lastBuildDate>
    <atom:link href="http://kuune.org/tags/gocchan/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>FeatureToggle ライブラリ書いた</title>
      <link>http://kuune.org/text/2014/01/20/write-library-of-feature-toggle/</link>
      <pubDate>Mon, 20 Jan 2014 09:31:19 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/01/20/write-library-of-feature-toggle/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/gocchan&#34;&gt;https://github.com/naoina/gocchan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FeatureToggle とはなんぞや？という方は &lt;a href=&#34;http://martinfowler.com/bliki/FeatureToggle.html&#34;&gt;http://martinfowler.com/bliki/FeatureToggle.html&lt;/a&gt; とか見てください。日本語の情報はかなり少ないようです。&lt;/p&gt;

&lt;p&gt;今回作ったのは Gocchan という golang 用 FeatureToggle ライブラリです。読みは「ごっちゃん」です。Go の channel とは一切関係ないです。&lt;br /&gt;
Ruby on Rails 用のそういったライブラリとして &lt;a href=&#34;https://github.com/cookpad/chanko&#34;&gt;Chanko&lt;/a&gt; というのがあるのですが、まぁ名前や機能はそこから来てます。&lt;/p&gt;

&lt;p&gt;使い方は以下のような感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;github.com/naoina/gocchan&amp;quot;

type MyFeature struct {}

func (f *MyFeature) ActiveIf(context interface{}, options ...interface{}) bool {
    return true
}

func (f *MyFeature) ExecMyFeature(context interface{}) {
    // do something.
}

func init() {
    gocchan.AddFeature(&amp;quot;name of feature&amp;quot;, &amp;amp;MyFeature{})
}

func main() {
    gocchan.Invoke(&amp;quot;context&amp;quot;, &amp;quot;name of feature&amp;quot;, &amp;quot;ExecMyFeature&amp;quot;, func() {
        // default processes.
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この例でいうと、&lt;code&gt;ActiveIf&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返した場合に &lt;code&gt;ExecMyFeature&lt;/code&gt; が実行され、&lt;code&gt;false&lt;/code&gt; を返した場合は &lt;code&gt;Invoke&lt;/code&gt; に渡した関数（デフォルト関数）が実行されます。&lt;br /&gt;
例えば &lt;code&gt;ActiveIf&lt;/code&gt; の返す値を設定ファイルや DB から持ってくるようにしていれば、まさに FeatureToggle として機能します。&lt;br /&gt;
また、Chanko と同様に、&lt;code&gt;Invoke&lt;/code&gt; の中（&lt;code&gt;ExecMyFeature&lt;/code&gt; メソッドの中など) でエラーが発生した場合もデフォルト関数が呼ばれます。ですので、単なるフラグを使って if-else で分岐するよりも安全です。&lt;br /&gt;
&lt;code&gt;Invoke&lt;/code&gt; の第 1 引数には任意のオブジェクトが渡せ、それが &lt;code&gt;ActiveIf&lt;/code&gt; や Feature function (この例でいうと &lt;code&gt;ExecMyFeature&lt;/code&gt;) に渡されますので、これを使って自由に機能を追加できます。&lt;/p&gt;

&lt;p&gt;まぁこれだけのライブラリですが、FeatureToggle 用途として普通に使えるんじゃないかと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>