<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Migu on kuune.org</title><link>http://kuune.org/tags/migu/</link><description>Recent content in Migu on kuune.org</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Oct 2014 17:53:44 +0900</lastBuildDate><atom:link href="http://kuune.org/tags/migu/index.xml" rel="self" type="application/rss+xml"/><item><title>Migu という golang 用 DB スキーマのマイグレーションツールを作った話</title><link>http://kuune.org/text/2014/10/29/migu/</link><pubDate>Wed, 29 Oct 2014 17:53:44 +0900</pubDate><guid>http://kuune.org/text/2014/10/29/migu/</guid><description>
&lt;p&gt;&lt;a href=&#34;https://github.com/winebarrel/ridgepole&#34;&gt;Ridgepole&lt;/a&gt; インスパイアの golang 用 DB スキーマのマイグレーションツールを作りました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/migu&#34;&gt;https://github.com/naoina/migu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Migu は Ridgepole と同様に（バグが無い限り）冪等性が保証されています。&lt;br /&gt;
Ridgepole と違うところは、スキーマ定義を DSL ではなくて golang の struct で定義するところです。こうすることによって、モデル定義 ＝ スキーマ定義となるので DRY になります。&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;下記を &lt;code&gt;schema.go&lt;/code&gt; というファイル名で保存します。ファイル名は何でもいいんですが、ここでは &lt;code&gt;schema.go&lt;/code&gt; を使います。package 名も何でも構いません。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package schema
type User struct {
Name string
Age int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に &lt;code&gt;migu_test&lt;/code&gt; というデータベースを &lt;code&gt;mysqladmin&lt;/code&gt; コマンドで作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysqladmin -u root create migu_test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここでは MySQL のパスワード無しの &lt;code&gt;root&lt;/code&gt; ユーザーでログインすることを想定しています。&lt;br /&gt;
データベースを作成したら &lt;code&gt;migu&lt;/code&gt; コマンドでマイグレーションを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;migu -u root sync migu_test schema.go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行した結果、下記のように &lt;code&gt;migu_test&lt;/code&gt; に &lt;code&gt;user&lt;/code&gt; テーブルが作成されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% mysql -u root migu_test -e &#39;desc user&#39;
+-------+--------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name | varchar(255) | NO | | NULL | |
| age | int(11) | NO | | NULL | |
+-------+--------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ではここから更に Migu のマイグレーションを試していきます。&lt;br /&gt;
先ほどの &lt;code&gt;schema.go&lt;/code&gt; を下記のように変更します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package schema
type User struct {
Name string
Age uint
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Age int&lt;/code&gt; を &lt;code&gt;Age uint&lt;/code&gt; に変えました。&lt;br /&gt;
では再度 &lt;code&gt;migu&lt;/code&gt; コマンドでマイグレーションを実行して結果を確認します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% migu -u root sync migu_test schema.go
% mysql -u root migu_test -e &#39;desc user&#39;
+-------+------------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------------------+------+-----+---------+-------+
| name | varchar(255) | NO | | NULL | |
| age | int(10) unsigned | NO | | NULL | |
+-------+------------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;age&lt;/code&gt; フィールドが &lt;code&gt;int(11)&lt;/code&gt; から &lt;code&gt;int(10) unsigned&lt;/code&gt; に変わっているのが分かるでしょうか？&lt;br /&gt;
このように、Migu ではスキーマ定義を変えてコマンドを実行すればマイグレーションができます。今までのようにマイグレーション用 SQL を書く必要はありません。&lt;br /&gt;
また、Migu の冪等性を確認するためにもう一度マイグレーションを実行してみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% migu -u root sync migu_test schema.go
% mysql -u root migu_test -e &#39;desc user&#39;
+-------+------------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------------------+------+-----+---------+-------+
| name | varchar(255) | NO | | NULL | |
| age | int(10) unsigned | NO | | NULL | |
+-------+------------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;変わっていませんね。&lt;/p&gt;
&lt;p&gt;ちなみに golang は同じパッケージ内であれば struct 本体とメソッドが別々のファイルにあってもいいので、下記のようにスキーマ定義とモデルの実装を分離することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// schema.go
type User struct {
Name string
Age int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// user.go
func (u *User) IsAlice() bool {
return u.Name == &amp;quot;alice&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Migu を使うことで大量のマイグレーションファイルを書く必要が無くなり、DB スキーマの管理が非常に楽になる上に身長が 5 センチ伸び、恋人もできることがお分かりいただけたかと思います。&lt;br /&gt;
とはいえ、まだまだ粗削りで足りない部分も多いので、これからもっと改良していく必要があります。&lt;br /&gt;
というわけで、あなたの Pull Request をお待ちしております。&lt;/p&gt;</description></item></channel></rss>