<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Texts on kuune.org</title><link>http://kuune.org/text/</link><description>Recent content in Texts on kuune.org</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Apr 2016 23:25:14 +0900</lastBuildDate><atom:link href="http://kuune.org/text/index.xml" rel="self" type="application/rss+xml"/><item><title>スプラトゥーンでウデマエが S&#43; になった</title><link>http://kuune.org/text/2016/04/13/splatoon/</link><pubDate>Wed, 13 Apr 2016 23:25:14 +0900</pubDate><guid>http://kuune.org/text/2016/04/13/splatoon/</guid><description>&lt;p&gt;ここ 1 年ぐらいよく見る話題のスプラトゥーンでやっとウデマエが S+ になりました。&lt;/p&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=naoina09-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00VDVY1C8&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;始めたのはかなり遅くて、今年に入ってからで、1 月中旬から 3 月頭まで諸事情でプレイできなかったので実質 2 ヶ月ぐらいで、実プレイ時間は 194 時間でした。&lt;br /&gt;
まだ S+ になってからプレイしてないので洗礼は受けていません。&lt;/p&gt;
&lt;p&gt;今まで FPS とかしたことはなくて初めてでした。そもそもほとんどゲームをしないので久々にプレイしたゲームでした。&lt;/p&gt;
&lt;p&gt;主に使っているブキはスプラシューターコラボで、ガチヤグラだとノヴァブラスターネオを担ぎます。&lt;br /&gt;
元々ノヴァブラスターネオを使ってましたが、ガチエリアとかステージによってはかなり辛いのと、塗りが弱いと確実に撃ち負けるため味方に依存するのでスプラシューターコラボをメインにしました。&lt;br /&gt;
でもノヴァブラスターネオの 1 確は気持ちいいんですよね。。。&lt;/p&gt;
&lt;p&gt;S+ 達成したことで終わりするつもりはないので、まだまだ精進していきます。&lt;/p&gt;</description></item><item><title>家庭用シュレッダーのススメ</title><link>http://kuune.org/text/2016/04/11/shredder/</link><pubDate>Mon, 11 Apr 2016 23:48:02 +0900</pubDate><guid>http://kuune.org/text/2016/04/11/shredder/</guid><description>
&lt;p&gt;個人情報に厳しい昨今いかがお過ごしでしょうか？&lt;/p&gt;
&lt;p&gt;今回は最近買ったものの中で QoL がかなり上がった家庭用シュレッダーを紹介します。&lt;br /&gt;
さて、あなたは家庭での個人情報の入った書類などはどうしていますか？&lt;br /&gt;
そのまま捨てる人もいれば破いて捨てる人、ハサミで細かく切って捨てる人もいると思います。&lt;br /&gt;
破くと大きすぎて容易に復元できますし、細かく切るのは非常に手間が掛かって大変です。&lt;/p&gt;
&lt;p&gt;そこでシュレッダーです。シュレッダーはさみや手動シュレッダーは大変なので電動がいいです。&lt;/p&gt;
&lt;p&gt;何故電動シュレッダーなのかというと、シュレッダーはさみや手動シュレッダーは面倒になり細断しなくなったりしてしまうからです。&lt;br /&gt;
電動であれば自動で細断してくれるので面倒なことは特にありませんし、少しでも個人情報が気になるものがあればとりあえずシュレッダーにかけてしまえる手軽さがあります。&lt;br /&gt;
これは大丈夫、これは細断したいという判断をしないでいいので本当に楽です。&lt;br /&gt;
私は住所氏名の書いてある DM や Amazon で買ったときに箱に入っている明細書、たまにレシートもシュレッダーにかけています。&lt;br /&gt;
レシートは特に細断する必要もないのですが、すぐ手の届くところにシュレッダーがあるためゴミ箱代わりとして使います。&lt;/p&gt;
&lt;p&gt;数ある電動シュレッダーの中で、私のオススメはこれです。&lt;/p&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=naoina09-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00E6KGOBY&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;このシュレッダーのいいところは細断がクロスカットの 2x10mm とかなり細かいことです。&lt;br /&gt;
細ければ細かいほど復元が難しくなるので、それだけで安心と安全につながります。&lt;br /&gt;
この価格帯のシュレッダーは細断がストレートカット、クロスカットの 4x30mm 前後程度のものが多いので、その細かさがわかるかと思います。&lt;br /&gt;
更に定格連続運転時間が 10 分なので、通常の使用であれば細断するものが多すぎて途中で止まってしまうということはまずありません。&lt;/p&gt;
&lt;p&gt;コンパクトなのもポイントです。&lt;br /&gt;
幅235mm 高さ 171mm 奥行き 133mm なので、本当にちょっとしたスペースに置くことができ、場所を取りません。&lt;/p&gt;
&lt;p&gt;もちろん物足りない部分もいくつかあります。&lt;br /&gt;
コンパクトゆえに A4 サイズのものは折らなければ通らないことや、同時に 2 枚までしか入れられないことなどです。&lt;br /&gt;
しかし、それらを差し引いても費用対効果は抜群にいいです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;私は前述のシュレッダーをオススメしますが、どのようなものであれ家庭に 1 台シュレッダーがあると個人情報の扱いを気にしなくても良くなり大変オススメです。&lt;/p&gt;</description></item><item><title>MVNO デビューした</title><link>http://kuune.org/text/2016/04/09/mvno-debut/</link><pubDate>Sat, 09 Apr 2016 23:31:21 +0900</pubDate><guid>http://kuune.org/text/2016/04/09/mvno-debut/</guid><description>&lt;p&gt;ついに MVNO デビューした。&lt;br /&gt;
10 年ぐらい au ユーザーだったけど、ほとんど通話しないし、データ通信も調べたら 1 ヶ月 3GB 超えること無かったので乗り換える決心をした。&lt;br /&gt;
端末は iPhone6s で、発売当日に機種変更してから 6 ヶ月即 SIM ロック解除したタイミングで &lt;a href=&#34;http://mineo.jp/&#34;&gt;mineo&lt;/a&gt; の D プラン（docomo 回線）に乗り換えた。&lt;br /&gt;
どこでも良かったけど mineo にした理由は、SIM ロック解除した機種で D プラン使えるか分からなかったので、最悪 A プラン（au 回線）にできると思ったから。結果的に D プランで普通に使えたので杞憂に終わった。&lt;/p&gt;
&lt;p&gt;端末代金の割賦金差し引いても月 5000 円以上安いので寿司を食うことも可能になった。&lt;/p&gt;</description></item><item><title>物語シリーズ読み始めた</title><link>http://kuune.org/text/2015/12/14/monogatari-series/</link><pubDate>Mon, 14 Dec 2015 22:55:30 +0900</pubDate><guid>http://kuune.org/text/2015/12/14/monogatari-series/</guid><description>&lt;p&gt;自分は読書（主にライトノベル）という趣味もあるが、最近やっと西尾維新の物語シリーズを読み始めた。&lt;br /&gt;
読む読む言いながら早数年、やっと手を付けた。&lt;br /&gt;
なんで今まで手を付けていなかったかというと、単純に 1 冊の値段が高いから。ラノベが 2 冊買えるぐらいの値段。&lt;/p&gt;
&lt;p&gt;今のところ読んだのは、左から「化物語（上）」「化物語（下）」「傷物語」。&lt;/p&gt;
&lt;div style=&#34;display:inline;&#34;&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;m=amazon&amp;f=ifr&amp;ref=qf_sp_asin_til&amp;asins=4062836025&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4062836076&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4062836637&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;一応アニメシリーズは全部見たけど結構再現度高い。アニメ見てから原作読んでも、原作読んでからアニメ見ても違和感ないと思う。&lt;br /&gt;
傷物語は来年から 3 部作で映画だからまだだけども、読んだ限りではアニメ化に向いてる感じだったので結構期待している。&lt;br /&gt;
物語シリーズは自分の中で古典と位置づけているので今後少しずつでも全部読むと思う。&lt;/p&gt;
&lt;p&gt;蛇足だけど、同じ西尾維新の作品で忘却探偵シリーズというのがある。&lt;br /&gt;
最近ドラマでもやってたから知ってるかも知れないし、知らないかも知れない。&lt;/p&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4062192020&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;この「掟上今日子の備忘録」だけ読んでみたが、良く言えば読みやすい、悪く言えば平坦という印象だった。&lt;br /&gt;
これは物語シリーズと全然違う。ところどころそれっぽい言い回しはあるけど、まぁ全然違うので物語シリーズを基準に買うとコレジャナイ感がすごい。多分、逆も然り。&lt;/p&gt;</description></item><item><title>スケートボードを始めた</title><link>http://kuune.org/text/2015/12/14/skateboard/</link><pubDate>Mon, 14 Dec 2015 22:25:41 +0900</pubDate><guid>http://kuune.org/text/2015/12/14/skateboard/</guid><description>&lt;p&gt;最近新しい趣味としてスケートボードを始めた。&lt;br /&gt;
始めはスケートボードは別に運動にならないとか思ってたけど、普通に滑るだけでも結構疲れるのでいい運動になる気がする。&lt;br /&gt;
まだ全然トリックとかはできないんだけど、まぁ運動不足解消にもなるかと思ってほぼ毎日 1 時間程度は滑っている。&lt;/p&gt;
&lt;p&gt;どれがいいとかわからなかったのでとりあえずすぐ使えるやつを買った。&lt;br /&gt;
ドンキとかにある安いやつはダメだけど、専門ショップで買うなら最初はどれでもいいらしいのでグラフィック（裏に書いてある絵）で選んだ。&lt;br /&gt;
ちなみにこれ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://skateboardshopsunabe.com/?pid=93307131&#34;&gt;&lt;img src=&#34;http://kuune.org/image/cliche-deck.jpg&#34; alt=&#34;cliche-deck&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;買ってからスケートボードを裸で持って滑りにいってたけど持ちにくいし片手塞がるのでそれ用のバッグも後日買った。&lt;/p&gt;
&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/B015IXAG0W/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B015IXAG0W&amp;linkCode=as2&amp;tag=naoina09-22&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B015IXAG0W&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=naoina09-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=naoina09-22&amp;l=as2&amp;o=9&amp;a=B015IXAG0W&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;もっと安いのもあったけどデザインに惹かれてしまった。&lt;/p&gt;
&lt;p&gt;今はマニュアルっていうウィリーみたいなトリックを練習してるが、今日も手をついてコケてしまって腕がかなり痛い。&lt;br /&gt;
もうおっさんなので 2、3 日ぐらい経たないと回復しないし、痛いのも嫌なのでヘルメットとプロテクターもポチった。&lt;/p&gt;
&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/B00NK8IW0E/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00NK8IW0E&amp;linkCode=as2&amp;tag=naoina09-22&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B00NK8IW0E&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=naoina09-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=naoina09-22&amp;l=as2&amp;o=9&amp;a=B00NK8IW0E&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/B002WTUY7G/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B002WTUY7G&amp;linkCode=as2&amp;tag=naoina09-22&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B002WTUY7G&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=naoina09-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=naoina09-22&amp;l=as2&amp;o=9&amp;a=B002WTUY7G&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;他にも色々趣味が増えてきて身体が足りないので、あと 10 体ぐらい自分がほしい。&lt;/p&gt;</description></item><item><title>Custom anyframe-widget-cd-ghq-repository</title><link>http://kuune.org/text/2015/12/09/custom-anyframe-widget-cd-ghq-repository/</link><pubDate>Wed, 09 Dec 2015 22:54:32 +0900</pubDate><guid>http://kuune.org/text/2015/12/09/custom-anyframe-widget-cd-ghq-repository/</guid><description>&lt;p&gt;zsh には &lt;a href=&#34;https://github.com/mollifier/anyframe&#34;&gt;anyframe&lt;/a&gt; という &lt;a href=&#34;https://github.com/peco/peco&#34;&gt;peco&lt;/a&gt;/&lt;a href=&#34;https://github.com/mooz/percol&#34;&gt;percol&lt;/a&gt;/&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; を便利に使うためのライブラリがあって、中でも &lt;strong&gt;anyframe-widget-cd-ghq-repository&lt;/strong&gt; を便利に、それはもう便利に使っていました。&lt;br /&gt;
ですが、中で &lt;code&gt;ghq list --full-path&lt;/code&gt; を使っていて自分のリポジトリを絞り込もうと思っても簡潔にできなかったので自前で plugin 書かきました。&lt;/p&gt;
&lt;p&gt;自分はユーザー名をハンドルそのままの &lt;code&gt;naoina&lt;/code&gt; を使っているので、リポジトリのユーザー名とかぶります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/anyframe-peco-ghq-before.gif&#34; alt=&#34;before&#34; /&gt;&lt;/p&gt;
&lt;p&gt;なので、下記のようにして &lt;code&gt;ghq root&lt;/code&gt; より後のパスで絞りこめるようにしました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# zsh/anyframe-functions/sources/anyframe-source-ghq-repository-relative-path
ghq list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# .zsh/anyframe-functions/widgets/anyframe-widget-cd-ghq-repository-relative-path
anyframe-source-ghq-repository-relative-path \
| anyframe-selector-auto \
| awk &amp;quot;{ print \&amp;quot;$(ghq root)/\&amp;quot; \$1 }&amp;quot; \
| anyframe-action-execute cd --
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# .zshrc
fpath=($HOME/.zsh $fpath)
alias r=&amp;quot;anyframe-widget-cd-ghq-repository-relative-path&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/anyframe-peco-ghq-after.gif&#34; alt=&#34;after&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mollifier/anyframe&#34;&gt;anyframe&lt;/a&gt; は自前で plugin を簡単に書けるのでいいですね。&lt;/p&gt;</description></item><item><title> 私の英語学習の教材について</title><link>http://kuune.org/text/2015/05/17/learning-english/</link><pubDate>Sun, 17 May 2015 12:21:40 +0900</pubDate><guid>http://kuune.org/text/2015/05/17/learning-english/</guid><description>
&lt;p&gt;最近某オンライン英会話を全く準備せずにやってみたところ見事に撃沈しました。&lt;br /&gt;
例えば、なんて言うか分からずに考えているときに「えー」とか「あー」とかみたいなのを英語でどういうのか知らなかったので黙っていたら Hello? を連発されたり、なんて言っているかわからないのでチャットで入力してくれと言いたいけどそれもなんて言うか分からないのでどうしようもない時が流れたりしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英語での自己紹介&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Let me see&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Could you write it down, please? / Could you type it into the chatbox?&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Could you repeat that, please?&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Can you please speak more slowly?&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;辺りは用意しておかないとダメでした。&lt;/p&gt;
&lt;p&gt;さて、それからというもの本当の本当に本腰を入れて英語を勉強していますので、私がどういう教材を使って勉強しているのかを紹介します。&lt;br /&gt;
ちなみに私の最終目標は海外移住なので、それに合わせたものを選んでいます。ですので、紹介しているものは TOEIC 対策にはほぼ役に立たないのではないかと思います。（TOEIC を受けたことがないので実際のところはわかりかねます）&lt;/p&gt;
&lt;h2 id=&#34;grammar-in-use-シリーズ&#34;&gt;Grammar in Use シリーズ&lt;/h2&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=naoina09-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=0521133343&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;m=amazon&amp;f=ifr&amp;ref=tf_til&amp;asins=0521734770&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;英文法はこれが最強です。全て英語で書かれていますが、日本語の小難しい文法書を読むぐらいならこれを読むほうが圧倒的にいいです。オリジナルは英国英語ですが、上記は北米英語版です。&lt;br /&gt;
英国英語版と北米英語版のどちらを選ぶかは自由ですが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日本では英語といえば北米英語を指すことが多い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;リソースが多い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;オンライン英会話で大多数を占めるフィリピン人の英語が北米英語&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;IT 系の技術文書は北米英語&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった理由から、英国英語を学ぶ理由が特にないのであれば北米英語版を選びましょう。&lt;/p&gt;
&lt;p&gt;Basic Grammar in Use は絵が多いので直感的に理解しやすく、Grammar in Use Intermediate は絵は少ないですが解説している文法の数が多いです。基礎からやるなら前者のほうがおすすめです。&lt;br /&gt;
ちなみに私はこれで勉強しているので日本語で書かれた文法用語がよくわかりません。&lt;/p&gt;
&lt;h2 id=&#34;oxford-picture-dictionary&#34;&gt;Oxford Picture Dictionary&lt;/h2&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=0194369765&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=0194740536&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;主に日常生活に関連した英単語や語彙が多く載っています。本と Audio CD は別売りなので注意が必要です。&lt;br /&gt;
Picture Dictionary というのは、普通の辞書のように単語の意味を文字で説明するのではなく絵や写真で説明しているもので、英文法を知らなくても大体何を意味するかがわかるようになっています。&lt;br /&gt;
絵本みたいな感じなので子供に読ませるとかもアリではないかと思います。&lt;/p&gt;
&lt;p&gt;また、別途 TOEIC 対策用の単語集を持っていますが、載っている語彙の種類が全然違うためこの本は TOEIC を主眼に置いている人には合わないんじゃないかと思います。&lt;/p&gt;
&lt;h2 id=&#34;英語の発音が正しくなる本&#34;&gt;英語の発音が正しくなる本&lt;/h2&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4816344640&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;英語の発音ができれば聞き取りもできるらしいので、それなりに評判の良い本書を買いました。&lt;br /&gt;
CD だけでなく DVD も付いているので、口の形が見れるのはすごく参考になります。&lt;br /&gt;
私はこの本を読んだ結果 World や Girl の発音ができるようになりました。（Siri 調べ）&lt;/p&gt;
&lt;h2 id=&#34;会話できる英文法大特訓&#34;&gt;会話できる英文法大特訓&lt;/h2&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4863921179&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;瞬間英作文という日本語の短文を瞬時に英訳するという英会話学習方法がありますが、この本はそれ用に買いました。&lt;br /&gt;
瞬間英作文だと「どんどん話すための瞬間英作文トレーニング」という本が有名っぽいのですが、こちらのほうが例文が自然らしいのでこちらを選びました。&lt;br /&gt;
私としては英語は英語で勉強するのが 1 番いいと思っていて、日本語を瞬時に英訳するってそれ通訳とか翻訳の訓練なのでは？と疑問に思ったりもしてますが、それなりに効果があるとのことなので一応やってみています。&lt;/p&gt;
&lt;h2 id=&#34;engvid&#34;&gt;engVid&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.engvid.com/&#34;&gt;http://www.engvid.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;無料の英語学習動画が多く見られるサイトで、全て英語でのレッスンです。ネイティブスピーカーが文法やニュアンスの違いを説明しているので下手に日本語で勉強するよりはるかにわかりやすいです。&lt;br /&gt;
どの動画を見たという情報は記録できませんが、実際は YouTube の動画/チャンネルなので、お気に入りの講師のチャンネルを Subscribe してそちらで管理をすることができます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;英語をマスターして絶対に海外に住もうな。&lt;/p&gt;</description></item><item><title>ぼかにゅーを Kocha で再実装しました</title><link>http://kuune.org/text/2015/04/01/vocanew-kocha/</link><pubDate>Wed, 01 Apr 2015 23:22:40 +0900</pubDate><guid>http://kuune.org/text/2015/04/01/vocanew-kocha/</guid><description>&lt;p&gt;先日 Kocha v0.7.0 をリリースしたんですが、今回そのテストとして &lt;a href=&#34;http://vocanew.kuune.org&#34;&gt;ぼかにゅー&lt;/a&gt; を Kocha で実装し直しました。&lt;br /&gt;
ぼかにゅーの実装ははこれまで Symphony（PHP）→ Revel（Go）と来て今回で 3 度目の実装となります。&lt;br /&gt;
今のところ大きな問題は起きておらずいい感じです。&lt;/p&gt;
&lt;p&gt;また今回 Kocha で実装し直したのもあって、ぼかにゅーのサーバーサイド実装を GitHub にて公開することにしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/vocanew&#34;&gt;https://github.com/naoina/vocanew&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちなみに公開したものはあくまで Kocha のリファレンス実装という位置づけなのでクローラーは含まれていません。&lt;/p&gt;</description></item><item><title>VAIO Z (VJZ13A1) が届きました</title><link>http://kuune.org/text/2015/03/01/vaio-z/</link><pubDate>Sun, 01 Mar 2015 14:26:31 +0900</pubDate><guid>http://kuune.org/text/2015/03/01/vaio-z/</guid><description>
&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/vaio-z1.jpg&#34; alt=&#34;VAIO Z 1&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://kuune.org/image/vaio-z2.jpg&#34; alt=&#34;VAIO Z 2&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://kuune.org/image/vaio-z3.jpg&#34; alt=&#34;VAIO Z 3&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;キーボードの押下圧が軽いので良い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2 in 1 なのでタブレット形状にもなるが、タブレットとして使うには重い。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;USB や電源など全ての差し込み口が固いので片側を押さえながら入れないと筐体が動く&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;電源ボタンも固いので以下同上&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ペンでしかクリック（タップ？）できないのにペンをマウントするところが無い&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arch-linux-での現状&#34;&gt;Arch Linux での現状&lt;/h2&gt;
&lt;h3 id=&#34;動く&#34;&gt;動く&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;キーボード&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内臓カメラ&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Touchpad（ただしポインタデバイスとしてのみ）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Touchscreen（筆圧感知はテストしてない）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;動かない&#34;&gt;動かない&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Touchpad が Touchpad として認識されない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;つまり二本指でのスクロールができないゴミと化す&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Lenovo Yoga 3 でも同じっぽい&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Suspend から帰ってこない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黒い画面のまんま&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;backlight が暗いだけではない&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hibernate から帰ってきたら Xorg の画面描画がおかしい&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drm と i915 関連でエラーが出ている&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;追記-2015-03-01t17-38-34-09-00&#34;&gt;追記（2015-03-01T17:38:34+09:00）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;linux-drm-intel-nightly を AUR から入れて使うようにしたら Hibernate が動くようになった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カーネルバージョンは 4.0.0-rc1-drm_intel_nightly_20150301 になった&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;依然 Suspend は動かない&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと何かあれば追記する。&lt;/p&gt;</description></item><item><title>naoina/toml を TOML v0.4.0 に準拠させた</title><link>http://kuune.org/text/2015/02/16/toml-v0.4.0/</link><pubDate>Mon, 16 Feb 2015 00:03:34 +0900</pubDate><guid>http://kuune.org/text/2015/02/16/toml-v0.4.0/</guid><description>&lt;p&gt;以前 golang 用の TOML パーサー( &lt;a href=&#34;https://github.com/naoina/toml&#34;&gt;https://github.com/naoina/toml&lt;/a&gt; )を作りましたが、今回これを TOML 0.4.0 に準拠させていくつかのバグを修正しました。&lt;br /&gt;
golang 用の TOML パーサーには他に &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;https://github.com/BurntSushi/toml&lt;/a&gt; がありますが、これと違う点としては、パーサーを &lt;a href=&#34;http://ja.wikipedia.org/wiki/Parsing_Expression_Grammar&#34;&gt;PEG&lt;/a&gt; から生成しているのと、TOML ファイルにエラーがある場合のメッセージを分かりやすくするようにしている点です。&lt;/p&gt;
&lt;p&gt;あと、現在はデコーダーしか実装していないので TOML ファイルから Go の struct にマッピングはできますが、逆に Go の struct から TOML ファイルを生成することはできません。&lt;br /&gt;
別にエンコーダーの実装が難しいというわけではなくて、単に必要に迫られてないので実装してないだけです。issues か pull request がきたら実装すると思います。&lt;/p&gt;</description></item><item><title>golang web frameworks benchmark 02/2015 について</title><link>http://kuune.org/text/2015/02/11/regarding-golang-web-frameworks-benchmark/</link><pubDate>Wed, 11 Feb 2015 14:18:11 +0900</pubDate><guid>http://kuune.org/text/2015/02/11/regarding-golang-web-frameworks-benchmark/</guid><description>
&lt;p&gt;最近 &lt;a href=&#34;https://quip.com/Ha0bAfeh1ZVY&#34;&gt;golang web frameworks benchmark 02/2015&lt;/a&gt; という記事が出回っていて大変遺憾なので、件の記事がいかにゴミかをつらつらと書いていきます。&lt;/p&gt;
&lt;h3 id=&#34;ace-と-gin-は-httprouter-を使っている&#34;&gt;ace と Gin は HttpRouter を使っている&lt;/h3&gt;
&lt;p&gt;HttpRouter が king of performance なのはまぁいいです。&lt;br /&gt;
ですが、2 番目に位置づけている ace と Gin は HttpRouter を使っていることについて言及がありません。&lt;/p&gt;
&lt;h3 id=&#34;goji-を-3-番目-にしている理由がベンチマークと関係ない&#34;&gt;Goji を 3 番目 にしている理由がベンチマークと関係ない&lt;/h3&gt;
&lt;p&gt;タイトルに golang web frameworks benchmark 02/2015 と付けているにも関わらず Goji を 3 番目にしている理由がベンチマークと関係ない「安定している」です。&lt;br /&gt;
しかもベンチマークを見てもらえば分かりますが、別に 3 番目に速いというわけでもないです。&lt;/p&gt;
&lt;h3 id=&#34;denco-に言及がない&#34;&gt;Denco に言及がない&lt;/h3&gt;
&lt;p&gt;手前味噌ですが、自分が作っている &lt;a href=&#34;https://github.com/naoina/denco&#34;&gt;Denco&lt;/a&gt; という URL ルーターについて、ベンチマークでも安定して上位にいるにも関わらず一切の言及がありません。&lt;br /&gt;
前述した ace と Gin が HttpRouter を使っているということを鑑みると、このベンチマークは実質 HttpRouter 系 vs Denco という構図になります。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;調べもしないで恣意的にしか書けないならベンチマークを持ち出すな。&lt;br /&gt;
という文句を英語で書いて広めたいけどそんな英語力無いから日本語で書いた。&lt;/p&gt;</description></item><item><title>サイトをリニューアルした</title><link>http://kuune.org/text/2015/01/29/site-renewal/</link><pubDate>Thu, 29 Jan 2015 07:54:48 +0900</pubDate><guid>http://kuune.org/text/2015/01/29/site-renewal/</guid><description>&lt;p&gt;全面的に適当に作りなおしている（doing）。あとブログ的な何かは今後こちらに書いていく。&lt;br /&gt;
URL を見ると分かるが、blog ではなく text という呼称を使っている。blog というとちゃんと書かないといけないみたいなのが自分の中であって、text という呼称にすることによって何かを書くことへの障壁を下げた。&lt;/p&gt;
&lt;p&gt;技術的な話をすると、&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; という Go で作られた静的サイトジェネレーターを使って構築したものを GitHub Pages でホストしていて、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; → Travis-CI でビルド → Travis-CI が &lt;code&gt;gh-pages&lt;/code&gt; に push → 公開&lt;/p&gt;
&lt;p&gt;みたいに デプロイを自動化してる。&lt;br /&gt;
Travis-CI が混んでる時はなかなか変更が反映されないという問題があるけど、まぁビルドが通ったら通知がくるようにしているし、そんなに急いで公開しないといけないものもないので許容できる。&lt;/p&gt;
&lt;p&gt;前のブログには Zenback とか AdSense とか貼ってたけど、割と目障りだったし、技術的な記事を読む人はそんなものクリックしないし、そもそも AdBlock とか使ってて見えてもいないだろうから外した。&lt;/p&gt;
&lt;p&gt;あと今のデザインの大枠は &lt;a href=&#34;http://blog.golang.org/&#34;&gt;http://blog.golang.org/&lt;/a&gt; のパクリです。&lt;/p&gt;</description></item><item><title>Golangでどんな json が返ってくるかわからない時に struct で定義するまでじゃないんだけど､ interface だと呼び出しが面倒なのどうしたらいいんだろう問題への一回答例</title><link>http://kuune.org/text/2014/11/07/json-struct-interface-in-golang/</link><pubDate>Fri, 07 Nov 2014 16:21:00 +0900</pubDate><guid>http://kuune.org/text/2014/11/07/json-struct-interface-in-golang/</guid><description>&lt;p&gt;&lt;a href=&#34;http://konboi.hatenablog.com/entry/2014/11/07/155418&#34;&gt;http://konboi.hatenablog.com/entry/2014/11/07/155418&lt;/a&gt; これへの自分なりの回答です。元ブログのタイトルは const になってますが、多分 struct のことですかね。&lt;/p&gt;
&lt;p&gt;Golang では &lt;code&gt;var&lt;/code&gt; を使えば変数が定義できますが、このときに型を指定する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var name string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この型のところに struct を置いてやることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var user struct {
Name string
Age int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;よく考えればまぁできますよねという感じです。&lt;br /&gt;
これを応用すると、元ブログの例は下記のように書けます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
import (
&amp;quot;bytes&amp;quot;
&amp;quot;encoding/json&amp;quot;
&amp;quot;fmt&amp;quot;
)
func main() {
b := []byte(`{&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;hoge&amp;quot;: {&amp;quot;fuga&amp;quot;: &amp;quot;hoga&amp;quot;}}`)
dec := json.NewDecoder(bytes.NewReader(b))
var jsonData struct {
Foo string `json:&amp;quot;foo&amp;quot;`
Hoge struct {
Fuga string `json:&amp;quot;fuga&amp;quot;`
} `json:&amp;quot;hoge&amp;quot;`
}
dec.Decode(&amp;amp;jsonData)
fmt.Println(jsonData)
fmt.Println(jsonData.Hoge.Fuga)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/nTCdrMxYoQ&#34;&gt;http://play.golang.org/p/nTCdrMxYoQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ただしこの方法は本当にどんな内容が返ってくるか分からない時には使えない（例えば返ってくる json が {&amp;ldquo;foo&amp;rdquo;: &amp;ldquo;bar&amp;rdquo;} なのか {&amp;ldquo;bar&amp;rdquo;: &amp;ldquo;foo&amp;rdquo;} なのか分からない時など）のでその時は元の記事のように &lt;code&gt;interface{}&lt;/code&gt; で受け取って型アサーションしてやる必要があります。&lt;/p&gt;</description></item><item><title>Migu という golang 用 DB スキーマのマイグレーションツールを作った話</title><link>http://kuune.org/text/2014/10/29/migu/</link><pubDate>Wed, 29 Oct 2014 17:53:44 +0900</pubDate><guid>http://kuune.org/text/2014/10/29/migu/</guid><description>
&lt;p&gt;&lt;a href=&#34;https://github.com/winebarrel/ridgepole&#34;&gt;Ridgepole&lt;/a&gt; インスパイアの golang 用 DB スキーマのマイグレーションツールを作りました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/migu&#34;&gt;https://github.com/naoina/migu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Migu は Ridgepole と同様に（バグが無い限り）冪等性が保証されています。&lt;br /&gt;
Ridgepole と違うところは、スキーマ定義を DSL ではなくて golang の struct で定義するところです。こうすることによって、モデル定義 ＝ スキーマ定義となるので DRY になります。&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;下記を &lt;code&gt;schema.go&lt;/code&gt; というファイル名で保存します。ファイル名は何でもいいんですが、ここでは &lt;code&gt;schema.go&lt;/code&gt; を使います。package 名も何でも構いません。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package schema
type User struct {
Name string
Age int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に &lt;code&gt;migu_test&lt;/code&gt; というデータベースを &lt;code&gt;mysqladmin&lt;/code&gt; コマンドで作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysqladmin -u root create migu_test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここでは MySQL のパスワード無しの &lt;code&gt;root&lt;/code&gt; ユーザーでログインすることを想定しています。&lt;br /&gt;
データベースを作成したら &lt;code&gt;migu&lt;/code&gt; コマンドでマイグレーションを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;migu -u root sync migu_test schema.go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行した結果、下記のように &lt;code&gt;migu_test&lt;/code&gt; に &lt;code&gt;user&lt;/code&gt; テーブルが作成されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% mysql -u root migu_test -e &#39;desc user&#39;
+-------+--------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name | varchar(255) | NO | | NULL | |
| age | int(11) | NO | | NULL | |
+-------+--------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ではここから更に Migu のマイグレーションを試していきます。&lt;br /&gt;
先ほどの &lt;code&gt;schema.go&lt;/code&gt; を下記のように変更します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package schema
type User struct {
Name string
Age uint
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Age int&lt;/code&gt; を &lt;code&gt;Age uint&lt;/code&gt; に変えました。&lt;br /&gt;
では再度 &lt;code&gt;migu&lt;/code&gt; コマンドでマイグレーションを実行して結果を確認します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% migu -u root sync migu_test schema.go
% mysql -u root migu_test -e &#39;desc user&#39;
+-------+------------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------------------+------+-----+---------+-------+
| name | varchar(255) | NO | | NULL | |
| age | int(10) unsigned | NO | | NULL | |
+-------+------------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;age&lt;/code&gt; フィールドが &lt;code&gt;int(11)&lt;/code&gt; から &lt;code&gt;int(10) unsigned&lt;/code&gt; に変わっているのが分かるでしょうか？&lt;br /&gt;
このように、Migu ではスキーマ定義を変えてコマンドを実行すればマイグレーションができます。今までのようにマイグレーション用 SQL を書く必要はありません。&lt;br /&gt;
また、Migu の冪等性を確認するためにもう一度マイグレーションを実行してみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% migu -u root sync migu_test schema.go
% mysql -u root migu_test -e &#39;desc user&#39;
+-------+------------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------------------+------+-----+---------+-------+
| name | varchar(255) | NO | | NULL | |
| age | int(10) unsigned | NO | | NULL | |
+-------+------------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;変わっていませんね。&lt;/p&gt;
&lt;p&gt;ちなみに golang は同じパッケージ内であれば struct 本体とメソッドが別々のファイルにあってもいいので、下記のようにスキーマ定義とモデルの実装を分離することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// schema.go
type User struct {
Name string
Age int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// user.go
func (u *User) IsAlice() bool {
return u.Name == &amp;quot;alice&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Migu を使うことで大量のマイグレーションファイルを書く必要が無くなり、DB スキーマの管理が非常に楽になる上に身長が 5 センチ伸び、恋人もできることがお分かりいただけたかと思います。&lt;br /&gt;
とはいえ、まだまだ粗削りで足りない部分も多いので、これからもっと改良していく必要があります。&lt;br /&gt;
というわけで、あなたの Pull Request をお待ちしております。&lt;/p&gt;</description></item><item><title>Travis-CI で Windows バイナリをテストする</title><link>http://kuune.org/text/2014/08/20/test-windows-binary-on-travis-ci/</link><pubDate>Wed, 20 Aug 2014 13:55:22 +0900</pubDate><guid>http://kuune.org/text/2014/08/20/test-windows-binary-on-travis-ci/</guid><description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;travis-ciでapi-getでwine突っ込んでやったらwindows環境でのテストできるのでは？&lt;/p&gt;&amp;mdash; 7017 (@naoina) &lt;a href=&#34;https://twitter.com/naoina/statuses/498832759981240321&#34;&gt;August 11, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;できました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/travis-win-test&#34;&gt;https://github.com/naoina/travis-win-test&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go
go:
- 1.3
before_install:
- sudo apt-get update -qq
- sudo apt-get install -y wine
install:
- gvm cross windows 386
script:
- GOOS=windows GOARCH=386 go test -c
- wine travis-win-test.test.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/travis-win-test/blob/master/.travis.yml&#34;&gt;https://github.com/naoina/travis-win-test/blob/master/.travis.yml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;宗教上の理由で Golang を使いましたが、MinGW などのクロスコンパイラを用いても同様にできると思います。&lt;/p&gt;
&lt;p&gt;このように Travis-CI を用いる場合でも Windows バイナリのテストが行えることが分かりましたので、Gopher の皆様におかれましては Golang のクロスコンパイルの手軽さを活かして Windows 対応をしてみてはいかがでしょうか？&lt;/p&gt;</description></item></channel></rss>