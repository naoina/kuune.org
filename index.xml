<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kuune.org</title>
    <link>http://kuune.org/</link>
    <description>Recent content on kuune.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Dec 2015 22:54:32 +0900</lastBuildDate>
    <atom:link href="http://kuune.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Custom anyframe-widget-cd-ghq-repository</title>
      <link>http://kuune.org/text/2015/12/09/custom-anyframe-widget-cd-ghq-repository/</link>
      <pubDate>Wed, 09 Dec 2015 22:54:32 +0900</pubDate>
      
      <guid>http://kuune.org/text/2015/12/09/custom-anyframe-widget-cd-ghq-repository/</guid>
      <description>&lt;p&gt;zsh には &lt;a href=&#34;https://github.com/mollifier/anyframe&#34;&gt;anyframe&lt;/a&gt; という &lt;a href=&#34;https://github.com/peco/peco&#34;&gt;peco&lt;/a&gt;/&lt;a href=&#34;https://github.com/mooz/percol&#34;&gt;percol&lt;/a&gt;/&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; を便利に使うためのライブラリがあって、中でも &lt;strong&gt;anyframe-widget-cd-ghq-repository&lt;/strong&gt; を便利に、それはもう便利に使っていました。&lt;br /&gt;
ですが、中で &lt;code&gt;ghq list --full-path&lt;/code&gt; を使っていて自分のリポジトリを絞り込もうと思っても簡潔にできなかったので自前で plugin 書かきました。&lt;/p&gt;

&lt;p&gt;自分はユーザー名をハンドルそのままの &lt;code&gt;naoina&lt;/code&gt; を使っているので、リポジトリのユーザー名とかぶります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/anyframe-peco-ghq-before.gif&#34; alt=&#34;before&#34; /&gt;&lt;/p&gt;

&lt;p&gt;なので、下記のようにして &lt;code&gt;ghq root&lt;/code&gt; より後のパスで絞りこめるようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# zsh/anyframe-functions/sources/anyframe-source-ghq-repository-relative-path
ghq list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# .zsh/anyframe-functions/widgets/anyframe-widget-cd-ghq-repository-relative-path
anyframe-source-ghq-repository-relative-path \
  | anyframe-selector-auto \
  | awk &amp;quot;{ print \&amp;quot;$(ghq root)/\&amp;quot; \$1 }&amp;quot; \
  | anyframe-action-execute cd --
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# .zshrc
fpath=($HOME/.zsh $fpath)
alias r=&amp;quot;anyframe-widget-cd-ghq-repository-relative-path&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/anyframe-peco-ghq-after.gif&#34; alt=&#34;after&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mollifier/anyframe&#34;&gt;anyframe&lt;/a&gt; は自前で plugin を簡単に書けるのでいいですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> 私の英語学習の教材について</title>
      <link>http://kuune.org/text/2015/05/17/learning-english/</link>
      <pubDate>Sun, 17 May 2015 12:21:40 +0900</pubDate>
      
      <guid>http://kuune.org/text/2015/05/17/learning-english/</guid>
      <description>

&lt;p&gt;最近某オンライン英会話を全く準備せずにやってみたところ見事に撃沈しました。&lt;br /&gt;
例えば、なんて言うか分からずに考えているときに「えー」とか「あー」とかみたいなのを英語でどういうのか知らなかったので黙っていたら Hello? を連発されたり、なんて言っているかわからないのでチャットで入力してくれと言いたいけどそれもなんて言うか分からないのでどうしようもない時が流れたりしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;英語での自己紹介&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Let me see&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Could you write it down, please? / Could you type it into the chatbox?&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Could you repeat that, please?&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Can you please speak more slowly?&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;辺りは用意しておかないとダメでした。&lt;/p&gt;

&lt;p&gt;さて、それからというもの本当の本当に本腰を入れて英語を勉強していますので、私がどういう教材を使って勉強しているのかを紹介します。&lt;br /&gt;
ちなみに私の最終目標は海外移住なので、それに合わせたものを選んでいます。ですので、紹介しているものは TOEIC 対策にはほぼ役に立たないのではないかと思います。（TOEIC を受けたことがないので実際のところはわかりかねます）&lt;/p&gt;

&lt;h2 id=&#34;grammar-in-use-シリーズ:b98d43c4e70d47c0d8ce81f23b99d80e&#34;&gt;Grammar in Use シリーズ&lt;/h2&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=naoina09-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=0521133343&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;m=amazon&amp;f=ifr&amp;ref=tf_til&amp;asins=0521734770&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;英文法はこれが最強です。全て英語で書かれていますが、日本語の小難しい文法書を読むぐらいならこれを読むほうが圧倒的にいいです。オリジナルは英国英語ですが、上記は北米英語版です。&lt;br /&gt;
英国英語版と北米英語版のどちらを選ぶかは自由ですが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;日本では英語といえば北米英語を指すことが多い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;リソースが多い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;オンライン英会話で大多数を占めるフィリピン人の英語が北米英語&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;IT 系の技術文書は北米英語&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった理由から、英国英語を学ぶ理由が特にないのであれば北米英語版を選びましょう。&lt;/p&gt;

&lt;p&gt;Basic Grammar in Use は絵が多いので直感的に理解しやすく、Grammar in Use Intermediate は絵は少ないですが解説している文法の数が多いです。基礎からやるなら前者のほうがおすすめです。&lt;br /&gt;
ちなみに私はこれで勉強しているので日本語で書かれた文法用語がよくわかりません。&lt;/p&gt;

&lt;h2 id=&#34;oxford-picture-dictionary:b98d43c4e70d47c0d8ce81f23b99d80e&#34;&gt;Oxford Picture Dictionary&lt;/h2&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=0194369765&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=0194740536&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;主に日常生活に関連した英単語や語彙が多く載っています。本と Audio CD は別売りなので注意が必要です。&lt;br /&gt;
Picture Dictionary というのは、普通の辞書のように単語の意味を文字で説明するのではなく絵や写真で説明しているもので、英文法を知らなくても大体何を意味するかがわかるようになっています。&lt;br /&gt;
絵本みたいな感じなので子供に読ませるとかもアリではないかと思います。&lt;/p&gt;

&lt;p&gt;また、別途 TOEIC 対策用の単語集を持っていますが、載っている語彙の種類が全然違うためこの本は TOEIC を主眼に置いている人には合わないんじゃないかと思います。&lt;/p&gt;

&lt;h2 id=&#34;英語の発音が正しくなる本:b98d43c4e70d47c0d8ce81f23b99d80e&#34;&gt;英語の発音が正しくなる本&lt;/h2&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4816344640&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;英語の発音ができれば聞き取りもできるらしいので、それなりに評判の良い本書を買いました。&lt;br /&gt;
CD だけでなく DVD も付いているので、口の形が見れるのはすごく参考になります。&lt;br /&gt;
私はこの本を読んだ結果 World や Girl の発音ができるようになりました。（Siri 調べ）&lt;/p&gt;

&lt;h2 id=&#34;会話できる英文法大特訓:b98d43c4e70d47c0d8ce81f23b99d80e&#34;&gt;会話できる英文法大特訓&lt;/h2&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=naoina09-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4863921179&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;瞬間英作文という日本語の短文を瞬時に英訳するという英会話学習方法がありますが、この本はそれ用に買いました。&lt;br /&gt;
瞬間英作文だと「どんどん話すための瞬間英作文トレーニング」という本が有名っぽいのですが、こちらのほうが例文が自然らしいのでこちらを選びました。&lt;br /&gt;
私としては英語は英語で勉強するのが 1 番いいと思っていて、日本語を瞬時に英訳するってそれ通訳とか翻訳の訓練なのでは？と疑問に思ったりもしてますが、それなりに効果があるとのことなので一応やってみています。&lt;/p&gt;

&lt;h2 id=&#34;engvid:b98d43c4e70d47c0d8ce81f23b99d80e&#34;&gt;engVid&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.engvid.com/&#34;&gt;http://www.engvid.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;無料の英語学習動画が多く見られるサイトで、全て英語でのレッスンです。ネイティブスピーカーが文法やニュアンスの違いを説明しているので下手に日本語で勉強するよりはるかにわかりやすいです。&lt;br /&gt;
どの動画を見たという情報は記録できませんが、実際は YouTube の動画/チャンネルなので、お気に入りの講師のチャンネルを Subscribe してそちらで管理をすることができます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:b98d43c4e70d47c0d8ce81f23b99d80e&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;英語をマスターして絶対に海外に住もうな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ぼかにゅーを Kocha で再実装しました</title>
      <link>http://kuune.org/text/2015/04/01/vocanew-kocha/</link>
      <pubDate>Wed, 01 Apr 2015 23:22:40 +0900</pubDate>
      
      <guid>http://kuune.org/text/2015/04/01/vocanew-kocha/</guid>
      <description>&lt;p&gt;先日 Kocha v0.7.0 をリリースしたんですが、今回そのテストとして &lt;a href=&#34;http://vocanew.kuune.org&#34;&gt;ぼかにゅー&lt;/a&gt; を Kocha で実装し直しました。&lt;br /&gt;
ぼかにゅーの実装ははこれまで Symphony（PHP）→ Revel（Go）と来て今回で 3 度目の実装となります。&lt;br /&gt;
今のところ大きな問題は起きておらずいい感じです。&lt;/p&gt;

&lt;p&gt;また今回 Kocha で実装し直したのもあって、ぼかにゅーのサーバーサイド実装を GitHub にて公開することにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/vocanew&#34;&gt;https://github.com/naoina/vocanew&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみに公開したものはあくまで Kocha のリファレンス実装という位置づけなのでクローラーは含まれていません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VAIO Z (VJZ13A1) が届きました</title>
      <link>http://kuune.org/text/2015/03/01/vaio-z/</link>
      <pubDate>Sun, 01 Mar 2015 14:26:31 +0900</pubDate>
      
      <guid>http://kuune.org/text/2015/03/01/vaio-z/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/vaio-z1.jpg&#34; alt=&#34;VAIO Z 1&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://kuune.org/image/vaio-z2.jpg&#34; alt=&#34;VAIO Z 2&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://kuune.org/image/vaio-z3.jpg&#34; alt=&#34;VAIO Z 3&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;所感:82bf5d0ac258330d91f516bc4d88d318&#34;&gt;所感&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;キーボードの押下圧が軽いので良い&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2 in 1 なのでタブレット形状にもなるが、タブレットとして使うには重い。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;USB や電源など全ての差し込み口が固いので片側を押さえながら入れないと筐体が動く&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;電源ボタンも固いので以下同上&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ペンでしかクリック（タップ？）できないのにペンをマウントするところが無い&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;arch-linux-での現状:82bf5d0ac258330d91f516bc4d88d318&#34;&gt;Arch Linux での現状&lt;/h2&gt;

&lt;h3 id=&#34;動く:82bf5d0ac258330d91f516bc4d88d318&#34;&gt;動く&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;キーボード&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内臓カメラ&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Touchpad（ただしポインタデバイスとしてのみ）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Touchscreen（筆圧感知はテストしてない）&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;動かない:82bf5d0ac258330d91f516bc4d88d318&#34;&gt;動かない&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Touchpad が Touchpad として認識されない&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;つまり二本指でのスクロールができないゴミと化す&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Lenovo Yoga 3 でも同じっぽい&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suspend から帰ってこない&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;黒い画面のまんま&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;backlight が暗いだけではない&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hibernate から帰ってきたら Xorg の画面描画がおかしい&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;drm と i915 関連でエラーが出ている&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;追記-2015-03-01t17-38-34-09-00:82bf5d0ac258330d91f516bc4d88d318&#34;&gt;追記（2015-03-01T17:38:34+09:00）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;linux-drm-intel-nightly を AUR から入れて使うようにしたら Hibernate が動くようになった&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カーネルバージョンは 4.0.0-rc1-drm_intel_nightly_20150301 になった&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;依然 Suspend は動かない&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと何かあれば追記する。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>naoina/toml を TOML v0.4.0 に準拠させた</title>
      <link>http://kuune.org/text/2015/02/16/toml-v0.4.0/</link>
      <pubDate>Mon, 16 Feb 2015 00:03:34 +0900</pubDate>
      
      <guid>http://kuune.org/text/2015/02/16/toml-v0.4.0/</guid>
      <description>&lt;p&gt;以前 golang 用の TOML パーサー( &lt;a href=&#34;https://github.com/naoina/toml&#34;&gt;https://github.com/naoina/toml&lt;/a&gt; )を作りましたが、今回これを TOML 0.4.0 に準拠させていくつかのバグを修正しました。&lt;br /&gt;
golang 用の TOML パーサーには他に &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;https://github.com/BurntSushi/toml&lt;/a&gt; がありますが、これと違う点としては、パーサーを &lt;a href=&#34;http://ja.wikipedia.org/wiki/Parsing_Expression_Grammar&#34;&gt;PEG&lt;/a&gt; から生成しているのと、TOML ファイルにエラーがある場合のメッセージを分かりやすくするようにしている点です。&lt;/p&gt;

&lt;p&gt;あと、現在はデコーダーしか実装していないので TOML ファイルから Go の struct にマッピングはできますが、逆に Go の struct から TOML ファイルを生成することはできません。&lt;br /&gt;
別にエンコーダーの実装が難しいというわけではなくて、単に必要に迫られてないので実装してないだけです。issues か pull request がきたら実装すると思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golang web frameworks benchmark 02/2015 について</title>
      <link>http://kuune.org/text/2015/02/11/regarding-golang-web-frameworks-benchmark/</link>
      <pubDate>Wed, 11 Feb 2015 14:18:11 +0900</pubDate>
      
      <guid>http://kuune.org/text/2015/02/11/regarding-golang-web-frameworks-benchmark/</guid>
      <description>

&lt;p&gt;最近 &lt;a href=&#34;https://quip.com/Ha0bAfeh1ZVY&#34;&gt;golang web frameworks benchmark 02/2015&lt;/a&gt; という記事が出回っていて大変遺憾なので、件の記事がいかにゴミかをつらつらと書いていきます。&lt;/p&gt;

&lt;h3 id=&#34;ace-と-gin-は-httprouter-を使っている:d5cd9eacebcbb6367d818072c2752caf&#34;&gt;ace と Gin は HttpRouter を使っている&lt;/h3&gt;

&lt;p&gt;HttpRouter が king of performance なのはまぁいいです。&lt;br /&gt;
ですが、2 番目に位置づけている ace と Gin は HttpRouter を使っていることについて言及がありません。&lt;/p&gt;

&lt;h3 id=&#34;goji-を-3-番目-にしている理由がベンチマークと関係ない:d5cd9eacebcbb6367d818072c2752caf&#34;&gt;Goji を 3 番目 にしている理由がベンチマークと関係ない&lt;/h3&gt;

&lt;p&gt;タイトルに golang web frameworks benchmark 02/2015 と付けているにも関わらず Goji を 3 番目にしている理由がベンチマークと関係ない「安定している」です。&lt;br /&gt;
しかもベンチマークを見てもらえば分かりますが、別に 3 番目に速いというわけでもないです。&lt;/p&gt;

&lt;h3 id=&#34;denco-に言及がない:d5cd9eacebcbb6367d818072c2752caf&#34;&gt;Denco に言及がない&lt;/h3&gt;

&lt;p&gt;手前味噌ですが、自分が作っている &lt;a href=&#34;https://github.com/naoina/denco&#34;&gt;Denco&lt;/a&gt; という URL ルーターについて、ベンチマークでも安定して上位にいるにも関わらず一切の言及がありません。&lt;br /&gt;
前述した ace と Gin が HttpRouter を使っているということを鑑みると、このベンチマークは実質 HttpRouter 系 vs Denco という構図になります。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:d5cd9eacebcbb6367d818072c2752caf&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;調べもしないで恣意的にしか書けないならベンチマークを持ち出すな。&lt;br /&gt;
という文句を英語で書いて広めたいけどそんな英語力無いから日本語で書いた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>サイトをリニューアルした</title>
      <link>http://kuune.org/text/2015/01/29/site-renewal/</link>
      <pubDate>Thu, 29 Jan 2015 07:54:48 +0900</pubDate>
      
      <guid>http://kuune.org/text/2015/01/29/site-renewal/</guid>
      <description>&lt;p&gt;全面的に適当に作りなおしている（doing）。あとブログ的な何かは今後こちらに書いていく。&lt;br /&gt;
URL を見ると分かるが、blog ではなく text という呼称を使っている。blog というとちゃんと書かないといけないみたいなのが自分の中であって、text という呼称にすることによって何かを書くことへの障壁を下げた。&lt;/p&gt;

&lt;p&gt;技術的な話をすると、&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; という Go で作られた静的サイトジェネレーターを使って構築したものを GitHub Pages でホストしていて、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; → Travis-CI でビルド → Travis-CI が &lt;code&gt;gh-pages&lt;/code&gt; に push → 公開&lt;/p&gt;

&lt;p&gt;みたいに デプロイを自動化してる。&lt;br /&gt;
Travis-CI が混んでる時はなかなか変更が反映されないという問題があるけど、まぁビルドが通ったら通知がくるようにしているし、そんなに急いで公開しないといけないものもないので許容できる。&lt;/p&gt;

&lt;p&gt;前のブログには Zenback とか AdSense とか貼ってたけど、割と目障りだったし、技術的な記事を読む人はそんなものクリックしないし、そもそも AdBlock とか使ってて見えてもいないだろうから外した。&lt;/p&gt;

&lt;p&gt;あと今のデザインの大枠は &lt;a href=&#34;http://blog.golang.org/&#34;&gt;http://blog.golang.org/&lt;/a&gt; のパクリです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golangでどんな json が返ってくるかわからない時に struct で定義するまでじゃないんだけど､ interface だと呼び出しが面倒なのどうしたらいいんだろう問題への一回答例</title>
      <link>http://kuune.org/text/2014/11/07/json-struct-interface-in-golang/</link>
      <pubDate>Fri, 07 Nov 2014 16:21:00 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/11/07/json-struct-interface-in-golang/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://konboi.hatenablog.com/entry/2014/11/07/155418&#34;&gt;http://konboi.hatenablog.com/entry/2014/11/07/155418&lt;/a&gt; これへの自分なりの回答です。元ブログのタイトルは const になってますが、多分 struct のことですかね。&lt;/p&gt;

&lt;p&gt;Golang では &lt;code&gt;var&lt;/code&gt; を使えば変数が定義できますが、このときに型を指定する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var name string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この型のところに struct を置いてやることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var user struct {
    Name string
    Age  int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よく考えればまぁできますよねという感じです。&lt;br /&gt;
これを応用すると、元ブログの例は下記のように書けます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;fmt&amp;quot;
)

func main() {
    b := []byte(`{&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;hoge&amp;quot;: {&amp;quot;fuga&amp;quot;: &amp;quot;hoga&amp;quot;}}`)
    dec := json.NewDecoder(bytes.NewReader(b))
    var jsonData struct {
        Foo  string `json:&amp;quot;foo&amp;quot;`
        Hoge struct {
            Fuga string `json:&amp;quot;fuga&amp;quot;`
        } `json:&amp;quot;hoge&amp;quot;`
    }
    dec.Decode(&amp;amp;jsonData)
    fmt.Println(jsonData)
    fmt.Println(jsonData.Hoge.Fuga)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/nTCdrMxYoQ&#34;&gt;http://play.golang.org/p/nTCdrMxYoQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただしこの方法は本当にどんな内容が返ってくるか分からない時には使えない（例えば返ってくる json が {&amp;ldquo;foo&amp;rdquo;: &amp;ldquo;bar&amp;rdquo;} なのか {&amp;ldquo;bar&amp;rdquo;: &amp;ldquo;foo&amp;rdquo;} なのか分からない時など）のでその時は元の記事のように &lt;code&gt;interface{}&lt;/code&gt; で受け取って型アサーションしてやる必要があります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migu という golang 用 DB スキーマのマイグレーションツールを作った話</title>
      <link>http://kuune.org/text/2014/10/29/migu/</link>
      <pubDate>Wed, 29 Oct 2014 17:53:44 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/10/29/migu/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/winebarrel/ridgepole&#34;&gt;Ridgepole&lt;/a&gt; インスパイアの golang 用 DB スキーマのマイグレーションツールを作りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/migu&#34;&gt;https://github.com/naoina/migu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Migu は Ridgepole と同様に（バグが無い限り）冪等性が保証されています。&lt;br /&gt;
Ridgepole と違うところは、スキーマ定義を DSL ではなくて golang の struct で定義するところです。こうすることによって、モデル定義 ＝ スキーマ定義となるので DRY になります。&lt;/p&gt;

&lt;h2 id=&#34;使い方:4b4ff7f79111255303f954736a076f6f&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;下記を &lt;code&gt;schema.go&lt;/code&gt; というファイル名で保存します。ファイル名は何でもいいんですが、ここでは &lt;code&gt;schema.go&lt;/code&gt; を使います。package 名も何でも構いません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package schema

type User struct {
    Name string
    Age  int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;migu_test&lt;/code&gt; というデータベースを &lt;code&gt;mysqladmin&lt;/code&gt; コマンドで作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysqladmin -u root create migu_test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは MySQL のパスワード無しの &lt;code&gt;root&lt;/code&gt; ユーザーでログインすることを想定しています。&lt;br /&gt;
データベースを作成したら &lt;code&gt;migu&lt;/code&gt; コマンドでマイグレーションを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;migu -u root sync migu_test schema.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行した結果、下記のように &lt;code&gt;migu_test&lt;/code&gt; に &lt;code&gt;user&lt;/code&gt; テーブルが作成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% mysql -u root migu_test -e &#39;desc user&#39;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| name  | varchar(255) | NO   |     | NULL    |       |
| age   | int(11)      | NO   |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ではここから更に Migu のマイグレーションを試していきます。&lt;br /&gt;
先ほどの &lt;code&gt;schema.go&lt;/code&gt; を下記のように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package schema

type User struct {
    Name string
    Age  uint
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Age int&lt;/code&gt; を &lt;code&gt;Age uint&lt;/code&gt; に変えました。&lt;br /&gt;
では再度 &lt;code&gt;migu&lt;/code&gt; コマンドでマイグレーションを実行して結果を確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% migu -u root sync migu_test schema.go
% mysql -u root migu_test -e &#39;desc user&#39;
+-------+------------------+------+-----+---------+-------+
| Field | Type             | Null | Key | Default | Extra |
+-------+------------------+------+-----+---------+-------+
| name  | varchar(255)     | NO   |     | NULL    |       |
| age   | int(10) unsigned | NO   |     | NULL    |       |
+-------+------------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;age&lt;/code&gt; フィールドが &lt;code&gt;int(11)&lt;/code&gt; から &lt;code&gt;int(10) unsigned&lt;/code&gt; に変わっているのが分かるでしょうか？&lt;br /&gt;
このように、Migu ではスキーマ定義を変えてコマンドを実行すればマイグレーションができます。今までのようにマイグレーション用 SQL を書く必要はありません。&lt;br /&gt;
また、Migu の冪等性を確認するためにもう一度マイグレーションを実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% migu -u root sync migu_test schema.go
% mysql -u root migu_test -e &#39;desc user&#39;
+-------+------------------+------+-----+---------+-------+
| Field | Type             | Null | Key | Default | Extra |
+-------+------------------+------+-----+---------+-------+
| name  | varchar(255)     | NO   |     | NULL    |       |
| age   | int(10) unsigned | NO   |     | NULL    |       |
+-------+------------------+------+-----+---------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変わっていませんね。&lt;/p&gt;

&lt;p&gt;ちなみに golang は同じパッケージ内であれば struct 本体とメソッドが別々のファイルにあってもいいので、下記のようにスキーマ定義とモデルの実装を分離することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// schema.go
type User struct {
    Name string
    Age  int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// user.go
func (u *User) IsAlice() bool {
    return u.Name == &amp;quot;alice&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ:4b4ff7f79111255303f954736a076f6f&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Migu を使うことで大量のマイグレーションファイルを書く必要が無くなり、DB スキーマの管理が非常に楽になる上に身長が 5 センチ伸び、恋人もできることがお分かりいただけたかと思います。&lt;br /&gt;
とはいえ、まだまだ粗削りで足りない部分も多いので、これからもっと改良していく必要があります。&lt;br /&gt;
というわけで、あなたの Pull Request をお待ちしております。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Travis-CI で Windows バイナリをテストする</title>
      <link>http://kuune.org/text/2014/08/20/test-windows-binary-on-travis-ci/</link>
      <pubDate>Wed, 20 Aug 2014 13:55:22 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/08/20/test-windows-binary-on-travis-ci/</guid>
      <description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;travis-ciでapi-getでwine突っ込んでやったらwindows環境でのテストできるのでは？&lt;/p&gt;&amp;mdash; 7017 (@naoina) &lt;a href=&#34;https://twitter.com/naoina/statuses/498832759981240321&#34;&gt;August 11, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;できました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/travis-win-test&#34;&gt;https://github.com/naoina/travis-win-test&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go

go:
  - 1.3

before_install:
  - sudo apt-get update -qq
  - sudo apt-get install -y wine

install:
  - gvm cross windows 386

script:
  - GOOS=windows GOARCH=386 go test -c
  - wine travis-win-test.test.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/travis-win-test/blob/master/.travis.yml&#34;&gt;https://github.com/naoina/travis-win-test/blob/master/.travis.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;宗教上の理由で Golang を使いましたが、MinGW などのクロスコンパイラを用いても同様にできると思います。&lt;/p&gt;

&lt;p&gt;このように Travis-CI を用いる場合でも Windows バイナリのテストが行えることが分かりましたので、Gopher の皆様におかれましては Golang のクロスコンパイルの手軽さを活かして Windows 対応をしてみてはいかがでしょうか？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kocha v0.5 リリースしました</title>
      <link>http://kuune.org/text/2014/07/24/kocha-v0.5/</link>
      <pubDate>Thu, 24 Jul 2014 10:56:39 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/07/24/kocha-v0.5/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/naoina/kocha&#34;&gt;https://github.com/naoina/kocha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前のバージョンとは非互換になってます。というか v1.0 まではバンバン非互換の変更入れていくつもりなので、まともに使うのはオススメしません。&lt;br /&gt;
ですが、もしそれでも Kocha を使いたいという場合は、人柱になって最新のバージョンを追いつつ使うか、&lt;a href=&#34;http://labix.org/gopkg.in&#34;&gt;gopkg.in&lt;/a&gt; を使ったりしてバージョンを固定して使うことをおすすめします。&lt;/p&gt;

&lt;h2 id=&#34;v0-5-での変更点:b1dfc794bc679a9a118f8dfd32659438&#34;&gt;v0.5 での変更点&lt;/h2&gt;

&lt;h3 id=&#34;url-ルーターを-denco-にしました:b1dfc794bc679a9a118f8dfd32659438&#34;&gt;URL ルーターを denco にしました&lt;/h3&gt;

&lt;p&gt;以前までの URL ルーターを別に切り出して改良した &lt;a href=&#34;https://github.com/naoina/denco&#34;&gt;Denco&lt;/a&gt; を使うようにしました。&lt;br /&gt;
これにより URL ルーティングのパフォーマンスが上がり、メモリ使用量も大幅に改善されています。&lt;/p&gt;

&lt;h3 id=&#34;net-http-互換として使えるようになりました:b1dfc794bc679a9a118f8dfd32659438&#34;&gt;net/http 互換として使えるようになりました&lt;/h3&gt;

&lt;p&gt;今までは Kocha で作ったものは Kocha でしか動かせませんでしたが、内外的に大幅に変更を加えて &lt;a href=&#34;http://golang.org/pkg/net/http/#Handler&#34;&gt;http.Handler&lt;/a&gt; インターフェースを実装しました。&lt;br /&gt;
これによって他の &lt;code&gt;net/http&lt;/code&gt; 用ライブラリ（ミドルウェアとして処理を挟むものなど）と組み合わせて使えるようになりました。&lt;br /&gt;
これは &lt;a href=&#34;http://naoina.github.io/kocha/docs/advanced.html&#34;&gt;http://naoina.github.io/kocha/docs/advanced.html&lt;/a&gt; に軽く書いています。&lt;br /&gt;
なお v0.5 における非互換性は大体この変更のせいです。&lt;/p&gt;

&lt;h3 id=&#34;go-1-3-以降のみをサポートします:b1dfc794bc679a9a118f8dfd32659438&#34;&gt;Go 1.3 以降のみをサポートします&lt;/h3&gt;

&lt;p&gt;golang はどんどん開発が進んでいるので敢えて古いものを使う必要は今のところ無いので新しいもの使っていきましょう。&lt;/p&gt;

&lt;p&gt;というのは建前で、実際のところは Kocha の graceful restart の機能を &lt;a href=&#34;https://github.com/naoina/miyabi&#34;&gt;miyabi&lt;/a&gt; というライブラリとして再実装し直して Kocha で使っているのですが、この miyabi が Go 1.3 で &lt;code&gt;net/http&lt;/code&gt; に導入された機能を使っているからです。&lt;/p&gt;

&lt;h2 id=&#34;今後の予定:b1dfc794bc679a9a118f8dfd32659438&#34;&gt;今後の予定&lt;/h2&gt;

&lt;p&gt;ログ周りの再設計をします。後は session による flash 機構の実装をしようと思います。&lt;br /&gt;
そこまでできたら &lt;a href=&#34;http://vocanew.kuune.org&#34;&gt;ぼかにゅー&lt;/a&gt; や、この plog.la を Kocha で実装して、実際に使う際に必要な機能やデバッグをしていこうと考えています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gin Web Framework について</title>
      <link>http://kuune.org/text/2014/07/01/gin-web-framework/</link>
      <pubDate>Tue, 01 Jul 2014 11:14:16 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/07/01/gin-web-framework/</guid>
      <description>&lt;p&gt;golang の新しい WEB アプリケーションフレームワークである &lt;a href=&#34;http://gin-gonic.github.io/gin/&#34;&gt;Gin Web Framework&lt;/a&gt; が出たらしいです。&lt;br /&gt;
この Gin、スゴイことにあの &lt;a href=&#34;https://github.com/go-martini/martini&#34;&gt;Martini&lt;/a&gt; より 40 倍速いとの触れ込みです。&lt;br /&gt;
ですが、この部分ちょっと違います。&lt;/p&gt;

&lt;p&gt;まず、Martini と比べて &lt;strong&gt;何が&lt;/strong&gt; 40 倍速いのか、というところですが&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/dd59ea0d-11d3-5dca-915f-ddb148cb4abc.png&#34; alt=&#34;20140701105236.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これ、HTTP ルーターの速度を測ってるんですね。速いですね。ちなみに &lt;em&gt;Check out the benchmark suite&lt;/em&gt; ってところからベンチマークリポジトリに飛べます。&lt;/p&gt;

&lt;p&gt;で、ここからが本題です。&lt;br /&gt;
Gin の HTTP ルーターは実は自前ではなく &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;HttpRouter&lt;/a&gt; という他の方が作った爆速の HTTP ルーターを使っています。&lt;br /&gt;
つまり、Martini より 40 倍速いのは Gin 本体ではなく HttpRouter ということです。これはちゃんと &lt;a href=&#34;http://gin-gonic.github.io/gin/#features&#34;&gt;ここ&lt;/a&gt; の &lt;em&gt;Low Overhead Powerful API&lt;/em&gt; にも明記されています。&lt;br /&gt;
ソースコードをざっと読んだ限りだと HttpRouter をチューニングして使っているということもなさそうなので、Gin 自体が Martini よりも 40 倍速いというのとはちょっと違うと思います。&lt;br /&gt;
多分 Martini よりも速い部分はあるのでしょうが、40 times faster の大部分は HttpRouter が持っていると思います。&lt;br /&gt;
github の starts 的にはマーケティングに成功してるっぽいですが、他人のプロダクトに乗っかってそれを広告に使うというのは私個人としては正直気持ち悪いです。&lt;/p&gt;

&lt;p&gt;余談ですが、HttpRouter は &lt;a href=&#34;https://github.com/julienschmidt/httprouter/issues/12&#34;&gt;https://github.com/julienschmidt/httprouter/issues/12&lt;/a&gt; みたいなのがあるので、実用できるのか微妙な気がしています。&lt;br /&gt;
ちなみに私も &lt;a href=&#34;https://github.com/naoina/denco&#34;&gt;Denco&lt;/a&gt; という HTTP ルーターを作ってまして、興味があれば &lt;a href=&#34;http://naoina.plog.la/2014/06/12/183508686252&#34;&gt;前の記事&lt;/a&gt; をご覧ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使うエンジニア、作るエンジニア</title>
      <link>http://kuune.org/text/2014/06/27/engineers/</link>
      <pubDate>Fri, 27 Jun 2014 09:22:12 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/06/27/engineers/</guid>
      <description>

&lt;p&gt;ここでいう エンジニア とは ソフトウェアエンジニア のことです。&lt;/p&gt;

&lt;h2 id=&#34;使うエンジニア:dc54b6b4f578cbd01428b90e24adf075&#34;&gt;使うエンジニア&lt;/h2&gt;

&lt;p&gt;既存のものを組み合わせて作る。&lt;br /&gt;
足りないものや不満があるものに関しては、無いものは仕方ないと割り切る。あるいは出てくるまで待つ。&lt;br /&gt;
builder。&lt;/p&gt;

&lt;h2 id=&#34;作るエンジニア:dc54b6b4f578cbd01428b90e24adf075&#34;&gt;作るエンジニア&lt;/h2&gt;

&lt;p&gt;既存のものを組み合わせて作る。&lt;br /&gt;
足りないものや不満があるものに関しては、自分で作ってしまうか、改善するための パッチ/プルリクエスト を送る。&lt;br /&gt;
creator。&lt;/p&gt;

&lt;h2 id=&#34;言いたいこと:dc54b6b4f578cbd01428b90e24adf075&#34;&gt;言いたいこと&lt;/h2&gt;

&lt;p&gt;不満不平を言うだけでなく、それを解決、改善するようなモノを作ろう。ソフトウェアエンジニアは変えられる力を持っているのだから。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ッターン！と箸の持ち方</title>
      <link>http://kuune.org/text/2014/06/26/type-the-enter/</link>
      <pubDate>Thu, 26 Jun 2014 19:44:34 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/06/26/type-the-enter/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/ac81835c-3ec9-570e-bd3d-f6ef7bba97db.gif&#34; alt=&#34;20100218_1708335.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;キーボードの Enter を目一杯力を入れて叩く人いますよね。アレと箸の持ち方が似てるなと思い立ったのでこのポエムを書いてます。&lt;/p&gt;

&lt;p&gt;ところで、私は箸が好きです。小学生の頃に自発的に正しい箸の持ち方を練習して、今ではかなり綺麗な持ち方をしていると自負しています。&lt;br /&gt;
青黒檀の 8000 円近くするマイ箸を箸袋と一緒に買ったり、とある居酒屋チェーン店でそれらを両方忘れて店を出てしまい、5 時間後に電話したら箸袋だけ出てきたとかいうことを言われたりするぐらい好きです。&lt;br /&gt;
金輪際その店には行かないと心に強く誓いました。&lt;s&gt;店が出す箸と色も違うし一緒に置いてたんだから無いわけねぇだろ&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;閑話休題。&lt;/p&gt;

&lt;p&gt;キーボードの打ち方というのは、正しく打つためにはきちんと運指などを学ぶ必要があります。&lt;br /&gt;
通常、キーボードを日常的に打たない人の場合、全ての指を駆使して打つことはできません。大体人差し指だけか、人差し指と中指だけで打ちます。&lt;br /&gt;
これは、キーボードの打ち方は覚えようとしないかぎり覚えないということに他なりません。&lt;/p&gt;

&lt;p&gt;これは箸の持ち方と同じ問題です。&lt;br /&gt;
箸も正しく持つには学んで練習する必要があります。そうでなければあの持ち方は絶対に身に付きません。&lt;/p&gt;

&lt;p&gt;つまりこういうことです。&lt;br /&gt;
ッターン！とする人はキーボードの打ち方が正しくないのではないでしょうか？正しいキーボードの打ち方をしていれば、Enter は右手小指で叩くはずです。&lt;br /&gt;
小指というのは指の中でも力が入りにくく、弱い部分です。ですので、小指では Enter を強く叩くことができないはずです。仮に強く叩くとしても、続けていれば小指が痛くなり、やはり強く叩くことをやめるはずです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ-1:cb7008fb1779dcb0c62350a3c106dc31&#34;&gt;まとめ 1&lt;/h2&gt;

&lt;p&gt;みなさん箸を正しく持ちましょう。&lt;/p&gt;

&lt;h2 id=&#34;まとめ-2:cb7008fb1779dcb0c62350a3c106dc31&#34;&gt;まとめ 2&lt;/h2&gt;

&lt;p&gt;ッターン！で気分が良いのは本人だけです。周りからするとうるさいだけなのでやめましょう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graceful shutdown と restart が出来る net/http コンパチのライブラリをつくった</title>
      <link>http://kuune.org/text/2014/06/26/miyabi/</link>
      <pubDate>Thu, 26 Jun 2014 12:00:43 +0900</pubDate>
      
      <guid>http://kuune.org/text/2014/06/26/miyabi/</guid>
      <description>&lt;p&gt;Miyabi&lt;br /&gt;
&lt;a href=&#34;https://github.com/naoina/miyabi&#34;&gt;https://github.com/naoina/miyabi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graceful shutdown/restart というのは HTTP サーバーにおいて、張られたソケットをいきなり切ってサーバーを終了するのではなく、すでに accept されているソケットに対する処理を終えてから終了または再起動することをいいます。&lt;br /&gt;
これによってダウンタイム無しでサーバーの再起動ができるようになります。&lt;/p&gt;

&lt;p&gt;Golang には既に graceful shutdown/restart をするようなものが色々とありますが、Miyabi は &lt;code&gt;net/http&lt;/code&gt; と完全に互換性があるように作っています。&lt;br /&gt;
なので、単に &lt;code&gt;http.ListenAndServe&lt;/code&gt; を &lt;code&gt;miyabi.ListenAndServe&lt;/code&gt; に変えるだけで graceful shutdown/restart が出来るようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kuune.org/image/2776dcd1-afa7-5a35-9cc5-7cbacae1acf4.gif&#34; alt=&#34;miyabi.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;注意点として、graceful restart を実現するにあたってサーバープロセスをフォークするようになっています。起動する毎に副作用によって挙動が変わるようなモノだとまともに動かないのではないかと思います。&lt;br /&gt;
また、先日リリースされた Go 1.3 の機能を使っているので 1.2.x 以下では動作しません。みなさん既に Go 1.3 もしくは tip を使っているはずなので問題ないでしょう。&lt;/p&gt;

&lt;p&gt;それでは、よい Golang 日和を。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>